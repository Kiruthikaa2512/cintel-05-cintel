[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\nfrom shiny import reactive, render\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\nimport plotly.graph_objs as go\n\n# --------------------------------------------\n# Constants and reactive data setup\n# --------------------------------------------\n\nUPDATE_INTERVAL_SECS: int = 15\nDEQUE_SIZE: int = 20\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n# --------------------------------------------\n# Reactive calc that generates temp + humidity\n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Generate random data\n    temperature = round(random.uniform(-18, -16), 1)\n    humidity = round(random.uniform(60, 100), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    new_dictionary_entry = {\n        \"temperature\": temperature,\n        \"humidity\": humidity,\n        \"timestamp\": timestamp,\n    }\n\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n    deque_snapshot = reactive_value_wrapper.get()\n    df = pd.DataFrame(deque_snapshot)\n\n    return deque_snapshot, df, new_dictionary_entry\n\n# --------------------------------------------\n# Page layout & sidebar\n# --------------------------------------------\n\nui.page_opts(title=\"Global Climate Monitor by Kiruthikaa\", fillable=True)\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Climate Stream Center\", class_=\"text-center\")\n    ui.p(\"Live environmental metrics updating in real-time using PyShiny.\", class_=\"text-center\")\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\"PyShiny Docs\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n\n# --------------------------------------------\n# Value Boxes Section\n# --------------------------------------------\n\nwith ui.layout_columns():\n    with ui.value_box(showcase=icon_svg(\"sun\"), theme=\"bg-gradient-orange-red\"):\n        \"Temperature\"\n        @render.text\n        def show_temp():\n            _, _, latest = reactive_calc_combined()\n            return f\"{latest['temperature']} \u00b0C\"\n        \"Live Antarctic Temperature\"\n\n    with ui.value_box(showcase=icon_svg(\"droplet\"), theme=\"bg-gradient-cyan-blue\"):\n        \"Humidity\"\n        @render.text\n        def show_humidity():\n            _, _, latest = reactive_calc_combined()\n            return f\"{latest['humidity']} %\"\n        \"Live Antarctic Humidity\"\n\n    with ui.value_box(showcase=icon_svg(\"clock\"), theme=\"bg-gradient-purple-indigo\"):\n        \"Timestamp\"\n        @render.text\n        def show_time():\n            _, _, latest = reactive_calc_combined()\n            return latest[\"timestamp\"]\n        \"Last Updated\"\n\n# --------------------------------------------\n# Data Grid Section\n# --------------------------------------------\n\nwith ui.card(full_screen=True):\n    ui.card_header(\"Recent Readings Snapshot\")\n    @render.data_frame\n    def display_grid():\n        _, df, _ = reactive_calc_combined()\n        return render.DataGrid(df, width=\"100%\")\n\n# --------------------------------------------\n# Temperature Trend Chart\n# --------------------------------------------\n\nwith ui.card():\n    ui.card_header(\"Temperature Trend\")\n\n    @render_plotly\n    def temp_chart():\n        _, df, _ = reactive_calc_combined()\n        if df.empty:\n            return go.Figure()\n\n        df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n        fig = go.Figure()\n\n        fig.add_trace(go.Scatter(\n            x=df[\"timestamp\"],\n            y=df[\"temperature\"],\n            mode=\"lines+markers\",\n            name=\"Temp\",\n            line=dict(color=\"#FF5733\"),\n        ))\n\n        if len(df) >= 2:\n            x_vals = list(range(len(df)))\n            slope, intercept, *_ = stats.linregress(x_vals, df[\"temperature\"])\n            trend = [slope * x + intercept for x in x_vals]\n\n            fig.add_trace(go.Scatter(\n                x=df[\"timestamp\"],\n                y=trend,\n                mode=\"lines\",\n                name=\"Trend\",\n                line=dict(color=\"#900C3F\", dash=\"dash\"),\n            ))\n\n        fig.update_layout(\n            xaxis_title=\"Time\",\n            yaxis_title=\"Temperature (\u00b0C)\",\n            plot_bgcolor=\"#FDFEFE\",\n            paper_bgcolor=\"#FBFCFC\",\n            font=dict(color=\"#1B2631\"),\n            title=\"Live Temperature Chart\"\n        )\n\n        return fig\n\n# --------------------------------------------\n# Humidity Trend Chart (Enhanced Feature)\n# --------------------------------------------\n\nwith ui.card():\n    ui.card_header(\"Humidity Trend\")\n\n    @render_plotly\n    def humidity_chart():\n        _, df, _ = reactive_calc_combined()\n        if df.empty:\n            return go.Figure()\n\n        df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n        fig = go.Figure()\n\n        fig.add_trace(go.Scatter(\n            x=df[\"timestamp\"],\n            y=df[\"humidity\"],\n            mode=\"lines+markers\",\n            name=\"Humidity\",\n            line=dict(color=\"#3498DB\"),\n        ))\n\n        if len(df) >= 2:\n            x_vals = list(range(len(df)))\n            slope, intercept, *_ = stats.linregress(x_vals, df[\"humidity\"])\n            trend = [slope * x + intercept for x in x_vals]\n\n            fig.add_trace(go.Scatter(\n                x=df[\"timestamp\"],\n                y=trend,\n                mode=\"lines\",\n                name=\"Humidity Trend\",\n                line=dict(color=\"#1F618D\", dash=\"dash\"),\n            ))\n\n        fig.update_layout(\n            xaxis_title=\"Time\",\n            yaxis_title=\"Humidity (%)\",\n            plot_bgcolor=\"#EBF5FB\",\n            paper_bgcolor=\"#F7F9F9\",\n            font=dict(color=\"#154360\"),\n            title=\"Live Humidity Chart\"\n        )\n\n        return fig", "type": "text"}]